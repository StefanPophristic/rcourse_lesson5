(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Summarise model and save
accuracy.glmer_sum = summary(accuracy.glmer)
accuracy.glmer_sum
# Test for effect of congruency
accuracy_congruency.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
congruency_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Model Comparison
accuracy_congruency.anova = anova(accuracy.glmer, accuracy_congruency.glmer)
accuracy_congruency.anova
# Test for effect of experiment half
accuracy_half.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
accuracy_half.anova = anova(accuracy.glmer, accuracy_half.glmer)
accuracy_half.anova
# Test for interaction of congruency x experiment half
accuracy_congruencyxhalf.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
accuracy_congruencyxhalf.anova = anova(accuracy.glmer, accuracy_congruencyxhalf.glmer)
accuracy_congruencyxhalf.anova
## BUILD MODELS FOR REACTION TIME ANALYSIS ####
# Full model
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+experiment_half|item), REML = F,
data = data_rt_stats)
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half|item), REML = F,
data = data_rt_stats)
rt_log10.lmer_sum = summary(rt_log10.lmer)
rt_log10.lmer_sum
# Test for effect of congruency
rt_log10_congruency.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+experiment_half|item), REML = F,
data = data_rt_stats)
# Test for effect of congruency
rt_log10_congruency.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half|item), REML = F,
data = data_rt_stats)
# Test for effect of congruency
data_rt_stats_2 <- data_rt_stats %>%
mutate(experiment_half = factor(half))
rt_log10_congruency.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+experiment_half|item), REML = F,
data = data_rt_stats_2)
## READ IN DATA ####
source("rcourse_lesson6_cleaning.R")
## LOAD PACKAGES ####
library(lme4)
## ORGANIZE DATA ####
# Accuracy data
data_accuracy_stats = data_accuracy_clean %>%
mutate(congruency_contrast = ifelse(congruency == "con", -0.5, 0.5)) %>%
mutate(half_contrast = ifelse(half == "first", -0.5, 0.5))
xtabs(~congruency+congruency_contrast, data_accuracy_stats)
xtabs(~half+half_contrast, data_accuracy_stats)
# RT data
data_rt_stats = data_rt_clean %>%
mutate(congruency_contrast = ifelse(congruency == "con", -0.5, 0.5)) %>%
mutate(half_contrast = ifelse(half == "first", -0.5, 0.5))
xtabs(~congruency+congruency_contrast, data_rt_stats)
xtabs(~half+half_contrast, data_rt_stats)
## BUILD MODELS FOR ACCURACY ANALYSIS ####
# Full model
accuracy.glmer = glmer(accuracy ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1+half_contrast|item), family = "binomial",
data = data_accuracy_stats)
# model failed to converge
accuracy.glmer = glmer(accuracy ~ congruency_contrast * half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Summarise model and save
accuracy.glmer_sum = summary(accuracy.glmer)
accuracy.glmer_sum
# Test for effect of congruency
accuracy_congruency.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
congruency_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Model Comparison
accuracy_congruency.anova = anova(accuracy.glmer, accuracy_congruency.glmer)
accuracy_congruency.anova
# Test for effect of experiment half
accuracy_half.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
accuracy_half.anova = anova(accuracy.glmer, accuracy_half.glmer)
accuracy_half.anova
# Test for interaction of congruency x experiment half
accuracy_congruencyxhalf.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
accuracy_congruencyxhalf.anova = anova(accuracy.glmer, accuracy_congruencyxhalf.glmer)
accuracy_congruencyxhalf.anova
## BUILD MODELS FOR REACTION TIME ANALYSIS ####
# Full model
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1+half_contrast|item), REML = F,
data = data_rt_stats)
#The lesson says this model does not converge but it did for me
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half|item), REML = F,
data = data_rt_stats)
rt_log10.lmer_sum = summary(rt_log10.lmer)
rt_log10.lmer_sum
View(data_rt_stats)
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10.lmer_sum = summary(rt_log10.lmer)
rt_log10.lmer_sum
o
rt_log10_congruency.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
# Test for effect of congruency
rt_log10_congruency.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10_congruency.anova = anova(rt_log10.lmer, rt_log10_congruency.lmer)
rt_log10_congruency.anova
# Test for effect of experiment half
rt_log10_half.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+experiment_half|item), REML = F,
data = data_rt_stats)
# Test for effect of experiment half
rt_log10_half.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_constrast|item), REML = F,
data = data_rt_stats)
# Test for effect of experiment half
rt_log10_half.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10_half.anova = anova(rt_log10.lmer, rt_log10_half.lmer)
rt_log10_half.anova
# Test for interaction of congruency and experiment half
rt_log10_congruencyxhalf.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+experiment_half|item), REML = F,
data = data_rt_stats)
# Test for interaction of congruency and experiment half
rt_log10_congruencyxhalf.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
# Test for interaction of congruency and experiment half
rt_log10_congruencyxhalf.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
# Test for interaction of congruency and experiment half
rt_log10_congruencyxhalf.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
# Test for interaction of congruency and experiment half
rt_log10_congruencyxhalf.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10_congruencyxhalf.anova = anova(rt_log10.lmer, rt_log10_congruencyxhalf.lmer)
rt_log10_congruencyxhalf.anova
############
# Stefan Pophristic
# STATS ANOVA Course â€” Lesson 5
# Jan. 9, 2023
# Script for analysis
############
## READ IN DATA ####
source("scripts/rcourse_lesson5_cleaning.R")
## READ IN DATA ####
source("course_lesson5_cleaning.R")
## READ IN DATA ####
source("course_lesson5_cleaning.R")
## LOAD PACKAGES ####
library(dplyr)
library(purrr)
## READ IN DATA ####
# Full data on election results
data_election_results = list.files(path = "data/elections", full.names = T) %>%
map(read.table, header = T, sep = "\t") %>%
reduce(rbind)
## LOAD PACKAGES ####
library(dplyr)
library(purrr)
## READ IN DATA ####
# Full data on election results
data_election_results = list.files(path = "data/elections", full.names = T) %>%
map(read.table, header = T, sep = "\t") %>%
reduce(rbind)
## READ IN DATA ####
# Full data on election results
data_election_results = list.files(path = "../data/elections", full.names = T) %>%
map(read.table, header = T, sep = "\t") %>%
reduce(rbind)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## LOAD PACKAGES ####
library(dplyr)
library(purrr)
## READ IN DATA ####
# Full data on election results
data_election_results = list.files(path = "../data/elections", full.names = T) %>%
map(read.table, header = T, sep = "\t") %>%
reduce(rbind)
# Read in extra data about specific elections
data_elections = read.table("data/rcourse_lesson5_data_elections.txt", header=T, sep="\t")
# Read in extra data about specific elections
data_elections = read.table("../data/rcourse_lesson5_data_elections.txt", header=T, sep="\t")
# Read in extra data about specific states
data_states = read.table("../data/rcourse_lesson5_data_states.txt", header=T, sep="\t")
# See how many states in union versus confederacy
xtabs(~civil_war, data_states)
# Make data set balanced for Union and Confederacy states
data_states_clean = data_states %>%
filter(!is.na(civil_war)) %>%
group_by(civil_war) %>%
arrange(order_enter) %>%
filter(row_number() <= 11) %>%
ungroup()
# Double check balanced for 'civil_war' variable
xtabs(~civil_war, data_states_clean)
# Combine three data frames
data_clean = data_election_results %>%
inner_join(data_elections) %>%
inner_join(data_states_clean) %>%
mutate(state = factor(state))
# Double check all of numbers are balanced
xtabs(~incumbent_party+civil_war, data_clean)
## READ IN DATA ####
source("scripts/rcourse_lesson5_cleaning.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("scripts/rcourse_lesson5_cleaning.R")
## READ IN DATA ####
source("rcourse_lesson5_cleaning.R")
## LOAD PACKAGES ####
library(ggplot2)
## ORGANIZE DATA ####
data_figs = data_clean %>%
mutate(civil_war = factor(civil_war,
levels = c("union", "confederacy"),
labels = c("Union", "Confederacy"))) %>%
mutate(incumbent_party = factor(incumbent_party,
levels = c("democrat", "republican"),
labels = c("Democrat", "Republican")))
# Average data over years but not states
data_figs_state_sum = data_figs %>%
group_by(state, incumbent_party, civil_war) %>%
summarise(perc_incumbent_mean =
mean(perc_votes_incumbent, na.rm = T)) %>%
ungroup()
# Data averaged over year and states for barplot
data_figs_sum = data_figs_state_sum %>%
group_by(incumbent_party, civil_war) %>%
summarise(mean = mean(perc_incumbent_mean, na.rm = T),
sd = sd(perc_incumbent_mean, na.rm = T),
n = n()) %>%
ungroup() %>%
mutate(se = sd / sqrt(n)) %>%
mutate(se_high = mean + se) %>%
mutate(se_low = mean - se)
# Histogram of full data set
incumbent_histogram_full.plot = ggplot(data_figs, aes(x = perc_votes_incumbent,
fill = incumbent_party)) +
geom_histogram(bins = 10) +
facet_grid(incumbent_party ~ civil_war) +
scale_fill_manual(values = c("blue", "red"))
pdf("figures/incumbent_histogram_full.pdf")
pdf("../figures/incumbent_histogram_full.pdf")
incumbent_histogram_full.plot
dev.off()
# Histogram of data averaged over years
incumbent_histogram_sum.plot = ggplot(data_figs_state_sum, aes(x = perc_incumbent_mean,
fill = incumbent_party)) +
geom_histogram(bins = 10) +
facet_grid(incumbent_party ~ civil_war) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_histogram_sum.pdf")
incumbent_histogram_sum.plot
dev.off()
# Boxplot
incumbent_boxplot.plot = ggplot(data_figs_state_sum, aes(x = civil_war,
y = perc_incumbent_mean,
fill = incumbent_party)) +
geom_boxplot() +
ylim(0, 100) +
geom_hline(yintercept = 50) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_boxplot.pdf")
incumbent_boxplot.plot
dev.off()
# Barplot
incumbent_barplot.plot = ggplot(data_figs_sum, aes(x = civil_war,
y = mean,
fill = incumbent_party)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = se_low, ymax = se_high),
width = 0.2,
position = position_dodge(0.9)) +
ylim(0, 100) +
geom_hline(yintercept = 50) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_barplot_sub.pdf")
incumbent_barplot.plot
dev.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("rcourse_lesson5_cleaning.R")
## LOAD PACKAGES ####
library(ggplot2)
## ORGANIZE DATA ####
data_figs = data_clean %>%
mutate(civil_war = factor(civil_war,
levels = c("union", "confederacy"),
labels = c("Union", "Confederacy"))) %>%
mutate(incumbent_party = factor(incumbent_party,
levels = c("democrat", "republican"),
labels = c("Democrat", "Republican")))
# Average data over years but not states
data_figs_state_sum = data_figs %>%
group_by(state, incumbent_party, civil_war) %>%
summarise(perc_incumbent_mean =
mean(perc_votes_incumbent, na.rm = T)) %>%
ungroup()
# Data averaged over year and states for barplot
data_figs_sum = data_figs_state_sum %>%
group_by(incumbent_party, civil_war) %>%
summarise(mean = mean(perc_incumbent_mean, na.rm = T),
sd = sd(perc_incumbent_mean, na.rm = T),
n = n()) %>%
ungroup() %>%
mutate(se = sd / sqrt(n)) %>%
mutate(se_high = mean + se) %>%
mutate(se_low = mean - se)
# Histogram of full data set
incumbent_histogram_full.plot = ggplot(data_figs, aes(x = perc_votes_incumbent,
fill = incumbent_party)) +
geom_histogram(bins = 10) +
facet_grid(incumbent_party ~ civil_war) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_histogram_full.pdf")
incumbent_histogram_full.plot
dev.off()
# Histogram of data averaged over years
incumbent_histogram_sum.plot = ggplot(data_figs_state_sum, aes(x = perc_incumbent_mean,
fill = incumbent_party)) +
geom_histogram(bins = 10) +
facet_grid(incumbent_party ~ civil_war) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_histogram_sum.pdf")
incumbent_histogram_sum.plot
dev.off()
# Boxplot
incumbent_boxplot.plot = ggplot(data_figs_state_sum, aes(x = civil_war,
y = perc_incumbent_mean,
fill = incumbent_party)) +
geom_boxplot() +
ylim(0, 100) +
geom_hline(yintercept = 50) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_boxplot.pdf")
incumbent_boxplot.plot
dev.off()
# Barplot
incumbent_barplot.plot = ggplot(data_figs_sum, aes(x = civil_war,
y = mean,
fill = incumbent_party)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = se_low, ymax = se_high),
width = 0.2,
position = position_dodge(0.9)) +
ylim(0, 100) +
geom_hline(yintercept = 50) +
scale_fill_manual(values = c("blue", "red"))
pdf("../figures/incumbent_barplot_sub.pdf")
incumbent_barplot.plot
dev.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("course_lesson5_cleaning.R")
## READ IN DATA ####
source("rcourse_lesson5_cleaning.R")
## LOAD PACKAGES ####
library(tidyr)
library(ez)
## ORAGANIZE DATA ####
# Make data for statistics
data_stats = data_clean %>%
mutate(civil_war = factor(civil_war, levels = c("union", "confederacy"))) %>%
group_by(state, incumbent_party, civil_war) %>%
summarise(perc_incumbent_mean = mean(perc_votes_incumbent, na.rm = T)) %>%
ungroup()
# Check if incumbent party is within-state
xtabs(~state+incumbent_party, data_stats)
# Check if civil war is within-state
xtabs(~state+civil_war, data_stats)
## BUILD MODELS ####
# ANOVA (base R)
incumbent.aov = aov(perc_incumbent_mean ~ incumbent_party * civil_war +
Error(state/incumbent_party), data = data_stats)
incumbent.aov_sum = summary(incumbent.aov)
incumbent.aov_sum
# ezANOVA
incumbent.ezanova = ezANOVA(data.frame(data_stats),
dv = perc_incumbent_mean,
wid = state,
within = incumbent_party,
between = civil_war,
type = 3)
incumbent.ezanova
# Prepare data for t-test
data_union_stats = data_stats %>%
filter(civil_war == "union") %>%
spread(incumbent_party, perc_incumbent_mean)
data_confederacy_stats = data_stats %>%
filter(civil_war == "confederacy") %>%
spread(incumbent_party, perc_incumbent_mean)
data_democrat_stats = data_stats %>%
filter(incumbent_party == "democrat")
data_republican_stats = data_stats %>%
filter(incumbent_party == "republican")
## FOLLOW-UP T-TESTS ####
# Effect of incumbent party, separated by civil war
incumbent_union.ttest = t.test(data_union_stats$democrat,
data_union_stats$republican,
paired = T)
incumbent_union.ttest
incumbent_confederacy.ttest = t.test(data_confederacy_stats$democrat,
data_confederacy_stats$republican,
paired = T)
incumbent_confederacy.ttest
# Effect of incumbent party, separated by civil war
incumbent_democrat.ttest = t.test(perc_incumbent_mean ~ civil_war,
paired = F,
data = data_democrat_stats)
incumbent_democrat.ttest
incumbent_republican.ttest = t.test(perc_incumbent_mean ~ civil_war,
paired = F,
data = data_republican_stats)
incumbent_republican.ttest
